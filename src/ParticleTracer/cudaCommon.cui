#pragma once
#include "helper_math.h"
#include "ParticleHelpers.h"

// Precise and efficient interpolation: (1-t)*v0 + t*v1
// Double precision
template <typename T>
__host__ __device__
inline T dlerp(T v0, T v1, T t) {
	return fma(t, v1, fma(-t, v0, v0));
}

// Single precision
template <typename T>
__host__ __device__
inline T flerp(T v0, T v1, T t) {
	return fmaf(t, v1, fmaf(-t, v0, v0));
}

// Flat indices
__device__ inline uint getThreadsPerBlock()
{
	return blockDim.x * blockDim.y * blockDim.z;
}

__device__ inline uint getThreadIdxInBlock()
{
	return threadIdx.x + (blockDim.x * threadIdx.y) + (blockDim.x * blockDim.y * threadIdx.z);
}

__device__ inline uint getBlockIdxInGrid()
{
	
	return blockIdx.x  + (gridDim.x * blockIdx.y) + (gridDim.x * gridDim.y * blockIdx.z);
}

__device__ inline uint getGlobalThreadIdx()
{
	return getBlockIdxInGrid() * getThreadsPerBlock() + getThreadIdxInBlock();
}

// Spatial Indices
__device__ inline uint3 getGlobalThreadPos()
{
	return blockIdx * blockDim + threadIdx;
	//return add(mult(blockIdx, blockDim), threadIdx);
}

// Helpers
__device__ inline bool checkThreadValid(uint3 seeds)
{
	uint3 globalThreadPos = getGlobalThreadPos();

	if ((globalThreadPos.x >= seeds.x) || (globalThreadPos.y >= seeds.y) || (globalThreadPos.z >= seeds.z))
	{
		return false;
	}

	return true;
}

__device__ inline bool checkParticleValid(float3 particlePos, uint4 fieldDims, float time)
{
	if (particlePos.x > (fieldDims.x - 1) || particlePos.x < 0.0) {
		return false;
	}

	if (particlePos.y > (fieldDims.y - 1) || particlePos.y < 0.0) {
		return false;
	}

	if (particlePos.z > (fieldDims.z - 1) || particlePos.z < 0.0) {
		return false;
	}

	if (time > fieldDims.w) {
		return false;
	}

	return true;
}

__device__ inline float3 texNorm(float3 pos, uint3 dims)
{
	return float3{ (pos.x + 0.5f) / dims.x, (pos.y + 0.5f) / dims.y, (pos.z + 0.5f) / dims.z };
}

__device__ inline float3 texNorm(uint3 pos, uint3 dims)
{
	return float3{ float(pos.x + 0.5f) / dims.x, float(pos.y + 0.5f) / dims.y, float(pos.z + 0.5f) / dims.z };
}
