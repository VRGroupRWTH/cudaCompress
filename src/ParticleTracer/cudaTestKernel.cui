#include "cudaCommon.cui"
#define INTERPOLATE_BUFFER

// Main
// Simply prints the internal thread index logic.
__global__ void kernelDimensionTest()
{
	uint32_t threadsPerBlock = getThreadsPerBlock();
	uint32_t threadIdxInBlock = getThreadIdxInBlock();
	uint32_t blockIdxInGrid = getBlockIdxInGrid();

	uint32_t globalThreadIdx = getGlobalThreadIdx();
	uint3 globalThreadPos = getGlobalThreadPos();

	printf("threadIdx: %i | blockIdx: %i | globalIdx: %i | globalPos: (%i, %i, %i)\n", threadIdxInBlock, blockIdxInGrid, globalThreadIdx, globalThreadPos.x, globalThreadPos.y, globalThreadPos.z);
}

__device__ inline float3 uv(float3 pos, float3 dims)
{
    return {	(pos.x + 0.5f) / (dims.x - 1),
	            (pos.y + 0.5f) / (dims.y - 1),
	            (pos.z + 0.5f) / (dims.z - 1) };
}

__device__ inline float3 uv(float x, float y, float z, float3 dims)
{
    return {	(x + 0.5f) / (dims.x - 1),
	            (y + 0.5f) / (dims.y - 1),
	            (z + 0.5f) / (dims.z - 1) };
}

__device__ inline float3 uv_abs(float3 pos)
{
	return {	(pos.x + 0.5f),
	            (pos.y + 0.5f),
				(pos.z + 0.5f) };
}

__device__ inline float3 uv_abs(float x, float y, float z)
{
	return {	(x + 0.5f),
				(y + 0.5f),
				(z + 0.5f) };
}

__device__ float4 buf3D(float4* data_ptr, uint4 Dimensions, float x, float y, float z, uint t)
{
	// P0 & P1 are reference points which span a cube that contains the given position:
	//   P0: Strictly floored position, always valid
	//   P1: Strictly ceiled position, may exceed dataset boundaries
	int3 P0 = int3{ max((int)x, 0),
	                max((int)y, 0),
	                max((int)z, 0) };
	int3 P1 = int3{ min(P0.x + 1, (int)Dimensions.x - 1),
	                min(P0.y + 1, (int)Dimensions.y - 1),
	                min(P0.z + 1, (int)Dimensions.z - 1) };
	t = min(t, Dimensions.w - 1);

	// To prevent indexing outside of the buffer
	uint maxX = Dimensions.x - 1;
	uint maxY = Dimensions.y - 1;
	uint maxZ = Dimensions.z - 1;

	// Interpolation factor within [0.0, 1.0] in all directions
	float lam_x = fracf(x);
	float lam_y = fracf(y);
	float lam_z = fracf(z);

	uint elems2D = Dimensions.y * Dimensions.x;
	uint elems3D = elems2D * Dimensions.z;

	// Lower depth
	uint offsetT = min(t, Dimensions.w - 1) * elems3D;
	uint offset1 = offsetT + P0.z * elems2D + P0.y * Dimensions.x + P0.x;
	uint offset2 = offsetT + P0.z * elems2D + P0.y * Dimensions.x + P1.x;
	uint offset3 = offsetT + P0.z * elems2D + P1.y * Dimensions.x + P1.x;
	uint offset4 = offsetT + P0.z * elems2D + P1.y * Dimensions.x + P0.x;

	float4 c0 = data_ptr[offset1];
	float4 c1 = data_ptr[offset2];
	float4 c2 = data_ptr[offset3];
	float4 c3 = data_ptr[offset4];

	// Higher depth
	uint addZ = P1.z < (Dimensions.z - 1);
	offset1 += addZ * elems2D;
	offset2 += addZ * elems2D;
	offset3 += addZ * elems2D;
	offset4 += addZ * elems2D;

	float4 d0 = data_ptr[offset1];
	float4 d1 = data_ptr[offset2];
	float4 d2 = data_ptr[offset3];
	float4 d3 = data_ptr[offset4];

	// Bilinear interpolation (2D, near)
	float4 i0 = lerp(c0, c1, lam_x);
	float4 i1 = lerp(c3, c2, lam_x);
	float4 c = lerp(i0, i1, lam_y);

	// Bilinear interpolation (2D, far)
	float4 j0 = lerp(d0, d1, lam_x);
	float4 j1 = lerp(d3, d2, lam_x);
	float4 d = lerp(j0, j1, lam_y);

	// Trilinearly interpolated vector (3D)
	return lerp(c, d, lam_z);
}

__device__ float3 buf3D(float3* data_ptr, uint4 Dimensions, float x, float y, float z, uint t)
{
	// P0 & P1 are reference points which span a cube that contains the given position:
	//   P0: Strictly floored position, always valid
	//   P1: Strictly ceiled position, may exceed dataset boundaries
	int3 P0 = int3{ max((int)x, 0),
					max((int)y, 0),
					max((int)z, 0) };
	int3 P1 = int3{ min(P0.x + 1, (int)Dimensions.x - 1),
					min(P0.y + 1, (int)Dimensions.y - 1),
					min(P0.z + 1, (int)Dimensions.z - 1) };
	t = min(t, Dimensions.w - 1);

	// To prevent indexing outside of the buffer
	uint maxX = Dimensions.x - 1;
	uint maxY = Dimensions.y - 1;
	uint maxZ = Dimensions.z - 1;

	// Interpolation factor within [0.0, 1.0] in all directions
	float lam_x = fracf(x);
	float lam_y = fracf(y);
	float lam_z = fracf(z);

	uint elems2D = Dimensions.y * Dimensions.x;
	uint elems3D = elems2D * Dimensions.z;

	// Lower depth
	uint offsetT = min(t, Dimensions.w - 1) * elems3D;
	uint offset1 = offsetT + P0.z * elems2D + P0.y * Dimensions.x + P0.x;
	uint offset2 = offsetT + P0.z * elems2D + P0.y * Dimensions.x + P1.x;
	uint offset3 = offsetT + P0.z * elems2D + P1.y * Dimensions.x + P1.x;
	uint offset4 = offsetT + P0.z * elems2D + P1.y * Dimensions.x + P0.x;

	float3 c0 = data_ptr[offset1];
	float3 c1 = data_ptr[offset2];
	float3 c2 = data_ptr[offset3];
	float3 c3 = data_ptr[offset4];

	// Higher depth
	uint addZ = P1.z < (Dimensions.z - 1);
	offset1 += addZ * elems2D;
	offset2 += addZ * elems2D;
	offset3 += addZ * elems2D;
	offset4 += addZ * elems2D;

	float3 d0 = data_ptr[offset1];
	float3 d1 = data_ptr[offset2];
	float3 d2 = data_ptr[offset3];
	float3 d3 = data_ptr[offset4];

	// Bilinear interpolation (2D, near)
	float3 i0 = lerp(c0, c1, lam_x);
	float3 i1 = lerp(c3, c2, lam_x);
	float3 c = lerp(i0, i1, lam_y);

	// Bilinear interpolation (2D, far)
	float3 j0 = lerp(d0, d1, lam_x);
	float3 j1 = lerp(d3, d2, lam_x);
	float3 d = lerp(j0, j1, lam_y);

	// Trilinearly interpolated vector (3D)
	return lerp(c, d, lam_z);
}

__device__ float3 buf3Dx3(float* data_ptr_x, float* data_ptr_y, float* data_ptr_z, uint4 Dimensions, float x, float y, float z, uint t)
{
	// P0 & P1 are reference points which span a cube that contains the given position:
	//   P0: Strictly floored position, always valid
	//   P1: Strictly ceiled position, may exceed dataset boundaries
	int3 P0 = int3{ (int)x, (int)y, (int)z };
	int3 P1 = P0 + int3{ 1, 1, 1 };
	t = min(t, Dimensions.w - 1);

	// To prevent indexing outside of the buffer
	uint maxX = Dimensions.x - 1;
	uint maxY = Dimensions.y - 1;
	uint maxZ = Dimensions.z - 1;

	// Interpolation factor within [0.0, 1.0] in all directions
	float lam_x = fracf(x);
	float lam_y = fracf(y);
	float lam_z = fracf(z);

	uint elems2D = Dimensions.y * Dimensions.x;
	uint elems3D = elems2D * Dimensions.z;

	// Lower depth
	uint offsetT = min(t, Dimensions.w - 1) * elems3D;
	uint offset1 = offsetT + P0.z * elems2D + P0.y * Dimensions.x            + P0.x;
	uint offset2 = offsetT + P0.z * elems2D + P0.y * Dimensions.x            + min(P1.x, maxX);
	uint offset3 = offsetT + P0.z * elems2D + min(P1.y, maxY) * Dimensions.x + min(P1.x, maxX);
	uint offset4 = offsetT + P0.z * elems2D + min(P1.y, maxY) * Dimensions.x + P0.x;

	float3 c0 = float3{ data_ptr_x[offset1], data_ptr_y[offset1], data_ptr_z[offset1] };
	float3 c1 = float3{ data_ptr_x[offset2], data_ptr_y[offset2], data_ptr_z[offset2] };
	float3 c2 = float3{ data_ptr_x[offset3], data_ptr_y[offset3], data_ptr_z[offset3] };
	float3 c3 = float3{ data_ptr_x[offset4], data_ptr_y[offset4], data_ptr_z[offset4] };

	// Higher depth
	uint addZ = (P1.z < Dimensions.z);
	offset1 += addZ * elems2D;
	offset2 += addZ * elems2D;
	offset3 += addZ * elems2D;
	offset4 += addZ * elems2D;

	float3 d0 = float3{ data_ptr_x[offset1], data_ptr_y[offset1], data_ptr_z[offset1] };
	float3 d1 = float3{ data_ptr_x[offset2], data_ptr_y[offset2], data_ptr_z[offset2] };
	float3 d2 = float3{ data_ptr_x[offset3], data_ptr_y[offset3], data_ptr_z[offset3] };
	float3 d3 = float3{ data_ptr_x[offset4], data_ptr_y[offset4], data_ptr_z[offset4] };

	// Bilinear interpolation (2D, near)
	float3 i0 = lerp(c0, c1, lam_x);
	float3 i1 = lerp(c3, c2, lam_x);
	float3 c = lerp(i0, i1, lam_y);

	// Bilinear interpolation (2D, far)
	float3 j0 = lerp(d0, d1, lam_x);
	float3 j1 = lerp(d3, d2, lam_x);
	float3 d = lerp(j0, j1, lam_y);

	// Trilinearly interpolated vector (3D)
	return lerp(c, d, lam_z);
}

__device__ float3 buf4D(Buffers3C data_buffers, uint4 Dimensions, float x, float y, float z, float t)
{
	float3 vector0 = buf3Dx3(data_buffers.x, data_buffers.y, data_buffers.z, Dimensions, x, y, z, uint(t));
	float3 vector1 = buf3Dx3(data_buffers.x, data_buffers.y, data_buffers.z, Dimensions, x, y, z, uint(t) + 1);

	return lerp(vector0, vector1, fracf(t));
}

__device__ float3 buf4D(float3* data_ptr, uint4 Dimensions, float x, float y, float z, float t)
{
	float3 vector0 = buf3D(data_ptr, Dimensions, x, y, z, uint(t));
	float3 vector1 = buf3D(data_ptr, Dimensions, x, y, z, uint(t) + 1);

	return lerp(vector0, vector1, fracf(t));
}


__device__ float3 buf4D(float4* data_ptr, uint4 Dimensions, float x, float y, float z, float t)
{
	float4 vector0 = buf3D(data_ptr, Dimensions, x, y, z, uint(t));
	float4 vector1 = buf3D(data_ptr, Dimensions, x, y, z, uint(t) + 1);

	return make_float3(lerp(vector0, vector1, fracf(t)));
}

__device__ float4 tex3Dx3(cudaTextureObject_t xTex, cudaTextureObject_t yTex, cudaTextureObject_t zTex, float x, float y, float z)
{
	float4 texel;
	texel.x = tex3D<float4>(xTex, x, y, z).x;
	texel.y = tex3D<float4>(yTex, x, y, z).x;
	texel.z = tex3D<float4>(zTex, x, y, z).x;
	//texel.w = 1.0;

	return texel;
}

__device__ inline float3 tex4D(cudaTextureObject_t* textures, float x, float y, float z, float t)
{
	int t0 = int(t);
	int t1 = t0 + 1;

	float4 texel0 = tex3D<float4>(textures[t0], x, y, z);
	float4 texel1 = tex3D<float4>(textures[t1], x, y, z);

	return make_float3(lerp(texel0, texel1, fracf(t)));
}

__device__ inline float3 tex4D(Textures3C textures, float x, float y, float z, float t)
{
	int t0 = int(t);
    int t1 = t0 + 1;

	float4 texel0 = tex3Dx3(textures.x[t0], textures.y[t0], textures.z[t0], x, y, z);
	float4 texel1 = tex3Dx3(textures.x[t1], textures.y[t1], textures.z[t1], x, y, z);

	return make_float3(lerp(texel0, texel1, fracf(t)));
}

__device__ float3 rk4(cudaTextureObject_t* textures, uint4 Dimensions, float3 pos, float dt, float time)
{
	float3 k1 = uv_abs(pos);
	float3 v1 = tex4D(textures, k1.x, k1.y, k1.z, time);				// v1 = F(x)

	float3 k2 = uv_abs(pos + v1 * 0.5f * dt);
	float3 v2 = tex4D(textures, k2.x, k2.y, k2.z, time + 0.5 * dt);		// v2 = F(x + 0.5 * v1 * dt)

	float3 k3 = uv_abs(pos + v2 * 0.5f * dt);
	float3 v3 = tex4D(textures, k3.x, k3.y, k3.z, time + 0.5 * dt);		// v3 = F(x + 0.5 * v2 * dt)

	float3 k4 = uv_abs(pos + v3 * dt);
	float3 v4 = tex4D(textures, k4.x, k4.y, k4.z, time + dt);			// v4 = F(x + 1.0 * v3 * dt)

	return float3{	v1.x + 2.0f * v2.x + 2.0f * v3.x + v4.x / 6.0f,
					v1.y + 2.0f * v2.y + 2.0f * v3.y + v4.y / 6.0f,
					v1.z + 2.0f * v2.z + 2.0f * v3.z + v4.z / 6.0f };
}

__device__ float3 rk4(Textures3C textures, uint4 Dimensions, float3 pos, float dt, float time)
{
	float3 k1 = uv_abs(pos);
	float3 v1 = tex4D(textures, k1.x, k1.y, k1.z, time);				// v1 = F(x)

	float3 k2 = uv_abs(pos + v1 * 0.5f * dt);
	float3 v2 = tex4D(textures, k2.x, k2.y, k2.z, time + 0.5 * dt);		// v2 = F(x + 0.5 * v1 * dt)

	float3 k3 = uv_abs(pos + v2 * 0.5f * dt);
	float3 v3 = tex4D(textures, k3.x, k3.y, k3.z, time + 0.5 * dt);		// v3 = F(x + 0.5 * v2 * dt)

	float3 k4 = uv_abs(pos + v3 * dt);
	float3 v4 = tex4D(textures, k4.x, k4.y, k4.z, time + dt);			// v4 = F(x + 1.0 * v3 * dt)

	return float3{	v1.x + 2.0f * v2.x + 2.0f * v3.x + v4.x / 6.0f,
					v1.y + 2.0f * v2.y + 2.0f * v3.y + v4.y / 6.0f,
					v1.z + 2.0f * v2.z + 2.0f * v3.z + v4.z / 6.0f };
}

__device__ float3 rk4(float3* data, uint4 Dimensions, float3 pos, float dt, float time)
{
	float3 k1 = pos;
	float3 v1 = buf4D(data, Dimensions, k1.x, k1.y, k1.z, time);				// v1 = F(x)

	float3 k2 = pos + v1 * 0.5f * dt;
	float3 v2 = buf4D(data, Dimensions, k2.x, k2.y, k2.z, time + 0.5 * dt);		// v2 = F(x + 0.5 * v1 * dt)

	float3 k3 = pos + v2 * 0.5f * dt;
	float3 v3 = buf4D(data, Dimensions, k3.x, k3.y, k3.z, time + 0.5 * dt);		// v3 = F(x + 0.5 * v2 * dt)

	float3 k4 = pos + v3 * dt;
	float3 v4 = buf4D(data, Dimensions, k4.x, k4.y, k4.z, time + dt);			// v4 = F(x + 1.0 * v3 * dt)

	return float3{	v1.x + 2.0f * v2.x + 2.0f * v3.x + v4.x / 6.0f,
					v1.y + 2.0f * v2.y + 2.0f * v3.y + v4.y / 6.0f,
					v1.z + 2.0f * v2.z + 2.0f * v3.z + v4.z / 6.0f };
}

__device__ float3 rk4(float4* data, uint4 Dimensions, float3 pos, float dt, float time)
{
	float3 k1 = pos;
	float3 v1 = buf4D(data, Dimensions, k1.x, k1.y, k1.z, time);				// v1 = F(x)

	float3 k2 = pos + v1 * 0.5f * dt;
	float3 v2 = buf4D(data, Dimensions, k2.x, k2.y, k2.z, time + 0.5 * dt);		// v2 = F(x + 0.5 * v1 * dt)

	float3 k3 = pos + v2 * 0.5f * dt;
	float3 v3 = buf4D(data, Dimensions, k3.x, k3.y, k3.z, time + 0.5 * dt);		// v3 = F(x + 0.5 * v2 * dt)

	float3 k4 = pos + v3 * dt;
	float3 v4 = buf4D(data, Dimensions, k4.x, k4.y, k4.z, time + dt);			// v4 = F(x + 1.0 * v3 * dt)

	return float3{	v1.x + 2.0f * v2.x + 2.0f * v3.x + v4.x / 6.0f,
					v1.y + 2.0f * v2.y + 2.0f * v3.y + v4.y / 6.0f,
					v1.z + 2.0f * v2.z + 2.0f * v3.z + v4.z / 6.0f };
}


__device__ float3 rk4(Buffers3C data, uint4 Dimensions, float3 pos, float dt, float time)
{
	float3 k1 = pos;
	float3 v1 = buf4D(data, Dimensions, k1.x, k1.y, k1.z, time);				// v1 = F(x)

	float3 k2 = pos + v1 * 0.5f * dt;
	float3 v2 = buf4D(data, Dimensions, k2.x, k2.y, k2.z, time + 0.5 * dt);		// v2 = F(x + 0.5 * v1 * dt)

	float3 k3 = pos + v2 * 0.5f * dt;
	float3 v3 = buf4D(data, Dimensions, k3.x, k3.y, k3.z, time + 0.5 * dt);		// v3 = F(x + 0.5 * v2 * dt)

	float3 k4 = pos + v3 * dt;
	float3 v4 = buf4D(data, Dimensions, k4.x, k4.y, k4.z, time + dt);			// v4 = F(x + 1.0 * v3 * dt)

	return float3{ v1.x + 2.0f * v2.x + 2.0f * v3.x + v4.x / 6.0f,
					v1.y + 2.0f * v2.y + 2.0f * v3.y + v4.y / 6.0f,
					v1.z + 2.0f * v2.z + 2.0f * v3.z + v4.z / 6.0f };
}

template <typename T>
__global__ void seedParticles(T textures, uint4 Dimensions, IntegrationConfig IntegrationConf, float3* ParticlePositions, float3* ParticleVelocities, uint32_t* ParticleTraceLength)
{
	if (!checkThreadValid(IntegrationConf.Seeds))
	{
		//printf("Skipped threadpos %i, %i, %i\n", getGlobalThreadPos().x, getGlobalThreadPos().y, getGlobalThreadPos().z);
		return;
	}

	uint3 particleId3D = getGlobalThreadPos();					// Spatial ID of the current particle
	uint particleId1D = particleId3D.z * IntegrationConf.Seeds.x * IntegrationConf.Seeds.y	// Flat ID of current particle
		+ particleId3D.y * IntegrationConf.Seeds.x
		+ particleId3D.x;
	uint bufferIndex = particleId1D * (IntegrationConf.Steps + 1);				// Start of the current particles trace

	//printf("Particle Idx: %i | Thread Pos: %i, %i, %i\n", particleIdx, getGlobalThreadPos().x, getGlobalThreadPos().y, getGlobalThreadPos().z);

	float3 pos = make_float3(particleId3D) * IntegrationConf.SeedsStride;
	float3 velo = rk4(textures, Dimensions, pos, IntegrationConf.dt, 0.0f);

	ParticlePositions[bufferIndex] = pos;
	ParticleVelocities[bufferIndex] = velo;
	ParticleTraceLength[particleId1D] = 1;					// Trajectory length of the current particle
}

template <typename T>
__global__ void traceParticles(T textures, uint4 Dimensions, IntegrationConfig IntegrationConf, float3* ParticlePositions, float3* ParticleVelocities, uint32_t* ParticleTraceLength)
{
	if (!checkThreadValid(IntegrationConf.Seeds))
	{
		return;
	}

	//return;

	uint3 particleId3D = getGlobalThreadPos();												// Spatial ID of the current particle
	uint particleId1D = particleId3D.z * IntegrationConf.Seeds.x * IntegrationConf.Seeds.y	// Flat ID of current particle
		+ particleId3D.y * IntegrationConf.Seeds.x
		+ particleId3D.x;
	uint bufferIndex = particleId1D * (IntegrationConf.Steps + 1);	// Start-Index of the current particles trace
	uint offset = ParticleTraceLength[particleId1D];				// Trajectory length of the current particle

	float3 pos = ParticlePositions[bufferIndex + offset - 1];
	float3 velo = ParticleVelocities[bufferIndex + offset - 1];
	float integrationTime = 0.0;

	int StepsRemaining = IntegrationConf.Steps + 1 - offset;

	for (int step = 0; step < StepsRemaining; step++)
	{
		if (!checkParticleValid(pos, Dimensions, integrationTime))
		{
			break;
		}

		pos = pos + velo * IntegrationConf.dt;
		velo = rk4(textures, Dimensions, pos, IntegrationConf.dt, integrationTime);
		//velo = rk4(textures, Dimensions, make_float3(0.0f), IntegrationConf.dt, integrationTime);
		//velo = make_float3(0.0f);

		ParticlePositions[bufferIndex + offset] = pos;
		ParticleVelocities[bufferIndex + offset] = velo;
		offset++;
		integrationTime += IntegrationConf.dt;
	}

	ParticleTraceLength[particleId1D] = offset;					// Trajectory length of the current particle
}

__global__ void testTexture(cudaTextureObject_t tex, uint4 Dimensions, float3 coords)
{
	float3 uv_coords = uv_abs(coords + 0.5);
	float4 texel = tex3D<float4>(tex, uv_coords.x, uv_coords.y, uv_coords.z);
	printf("Texel: %.2f, %.2f, %.2f, %.2f\n", texel.x, texel.y, texel.z, texel.w);
}

__global__ void testTextureVector(cudaTextureObject_t tex, uint4 Dimensions)
{
	float4 texel = make_float4(0.0);

	for (int z = 0; z < Dimensions.z; z++)
	{
		for (int x = 0; x < Dimensions.x; x++)
		{
			for (int y = 0; y < Dimensions.y; y++)
			{
				float3 uv_coords = uv_abs(make_float3(x, y, z) + 0.5f);
				float4 t = tex3D<float4>(tex, uv_coords.x, uv_coords.y, uv_coords.z);
				texel += t;
				//printf("t: %.2f, %.2f, %.2f, %.2f\n", t.x, t.y, t.z, t.w);
				//printf("Texel: %.2f, %.2f, %.2f, %.2f\n", texel.x, texel.y, texel.z, texel.w);
			}
		}
	}

	//printf("Texel: %.2f, %.2f, %.2f, %.2f\n", texel.x, texel.y, texel.z, texel.w);
}

__global__ void testTextureScalar(cudaTextureObject_t tex_r, cudaTextureObject_t tex_g, cudaTextureObject_t tex_b, uint4 Dimensions)
{
	float4 texel = make_float4(0.0);

	for (int z = 0; z < Dimensions.z; z++)
	{
		for (int x = 0; x < Dimensions.x; x++)
		{
			for (int y = 0; y < Dimensions.y; y++)
			{
				float3 uv_coords = uv_abs(make_float3(x, y, z) + 0.5f);
			    texel.x += tex3D<float4>(tex_r, uv_coords.x, uv_coords.y, uv_coords.z).x;
				texel.y += tex3D<float4>(tex_g, uv_coords.x, uv_coords.y, uv_coords.z).x;
				texel.z += tex3D<float4>(tex_b, uv_coords.x, uv_coords.y, uv_coords.z).x;
			}
		}
	}

	//printf("Texel: %.2f, %.2f, %.2f, %.2f\n", texel.x, texel.y, texel.z, texel.w);
}

__global__ void testBufferVector(float4* data_ptr, uint4 Dimensions)
{
	float4 vector = make_float4(0.0);

	//uint offset = 0;
	uint elems2D = Dimensions.y * Dimensions.x;
	for (int z = 0; z < Dimensions.z; z++)
	{
		for (int x = 0; x < Dimensions.x; x++)
		{
		    for (int y = 0; y < Dimensions.y; y++)
			{
				vector += buf3D(data_ptr, Dimensions, x + 0.5f, y + 0.5f, z + 0.5f, 0.0f);
			}
		}
	}

    //printf("Vector: %.2f, %.2f, %.2f\n", vector.x, vector.y, vector.z);
}

__global__ void testBufferScalar(float* data_ptr_x, float* data_ptr_y, float* data_ptr_z, uint4 Dimensions)
{
	float3 vector = make_float3(0.0);

    //uint offset = 0;
	uint elems2D = Dimensions.y * Dimensions.x;
	for (int z = 0; z < Dimensions.z; z++)
	{
		for (int x = 0; x < Dimensions.x; x++)
		{
			for (int y = 0; y < Dimensions.y; y++)
			{
				vector += buf3Dx3(data_ptr_x, data_ptr_y, data_ptr_z, Dimensions, x + 0.5f, y + 0.5f, z + 0.5f, 0.0f);
			}
		}
	}

	//printf("Vector: %.2f, %.2f, %.2f\n", vector.x, vector.y, vector.z);
}

